@using XSD2HTML
<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />  
</head>
<body>
    <table class="wrapped confluenceTable"  >
        <colgroup><col><col><col></colgroup>
        <tbody>
            <tr>
                <th class="confluenceTh">Property</th>
                <th class="confluenceTh">Type</th>
                <th class="confluenceTh">Description</th>
            </tr>
            @ListNodes(Model)

<tr>
    <td colspan="3"> 
        <span style='color: rgb(21, 125, 11); '> &#x2691; Mandatory </span>
        <span style='color: rgb(149, 10, 95); '> &#x2691; Optional </span>
        <span style='color: rgb(11, 32, 111); '> &#x2691; Repeating </span>
     </td>
</tr>
               </tbody>
    </table>
</body>
</html>

@helper ListNodes(SchemaNode Tag)
{
    <tr>

        <td>

        @Raw("<sup>" +Tag.Numbering+ "</sup>"  +" "+Tag.XmlTag)
        </td>
        <td>
            @{
                string cardinalityLegend = "";
                if (Tag.Cardinality == Cardinality.Optional)
                {
                    cardinalityLegend = "<span style='color: rgb(149, 10, 95) '>  O </span>";
                }
                else if (Tag.Cardinality == Cardinality.Required)
                {
                    cardinalityLegend = "<span style='color: rgb(21, 125, 11); '>  M </span>";
                }
                else if (Tag.Cardinality == Cardinality.Repeating)
                {
                    cardinalityLegend = "<span style='color: rgb(11, 32, 111); '> R [" + Tag.MinOccurs + ".." + Tag.MaxOccurs + "] </span>";
                }
            }
            @if (Tag is ComplexNode)
            {
                @Raw("<span>Record " + cardinalityLegend + " </span></text>")
            }
            else if (Tag is SimpleNode)
            {
                @Raw("<span>"+((SimpleNode)Tag).ElementType + cardinalityLegend + " </span></text>")
           
            }

        </td>
        <td></td>
    </tr>
    if (Tag is ComplexNode)
            {
                var lComplexNode = (ComplexNode)Tag;
                if (lComplexNode.mChildList != null)
                {
                    foreach (SchemaNode item in lComplexNode.mChildList)
                    {
                        @ListNodes(item)
                    }

                }
            }
}

